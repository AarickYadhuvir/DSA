// Develop a Double Ended Queue using the Operations (Enqueue (Front & Rear) & Dequeue (Front & Rear))

#include <stdio.h>
#include <stdlib.h>

// Structure representing a node in the deque
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Structure representing the deque
struct Deque {
    struct Node* front;
    struct Node* rear;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to initialize the deque
struct Deque* createDeque() {
    struct Deque* deque = (struct Deque*)malloc(sizeof(struct Deque));
    if (deque == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    deque->front = NULL;
    deque->rear = NULL;
    return deque;
}

// Function to check if the deque is empty
int isEmpty(struct Deque* deque) {
    return (deque->front == NULL && deque->rear == NULL);
}

// Function to enqueue an element at the front of the deque
void enqueueFront(struct Deque* deque, int data) {
    struct Node* newNode = createNode(data);
    if (isEmpty(deque)) {
        deque->front = newNode;
        deque->rear = newNode;
    } else {
        newNode->next = deque->front;
        deque->front->prev = newNode;
        deque->front = newNode;
    }
}

// Function to enqueue an element at the rear of the deque
void enqueueRear(struct Deque* deque, int data) {
    struct Node* newNode = createNode(data);
    if (isEmpty(deque)) {
        deque->front = newNode;
        deque->rear = newNode;
    } else {
        newNode->prev = deque->rear;
        deque->rear->next = newNode;
        deque->rear = newNode;
    }
}

// Function to dequeue an element from the front of the deque
int dequeueFront(struct Deque* deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty!\n");
        exit(1);
    } else {
        struct Node* temp = deque->front;
        int data = temp->data;
        if (deque->front == deque->rear) {
            deque->front = NULL;
            deque->rear = NULL;
        } else {
            deque->front = deque->front->next;
            deque->front->prev = NULL;
        }
        free(temp);
        return data;
    }
}

// Function to dequeue an element from the rear of the deque
int dequeueRear(struct Deque* deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty!\n");
        exit(1);
    } else {
        struct Node* temp = deque->rear;
        int data = temp->data;
        if (deque->front == deque->rear) {
            deque->front = NULL;
            deque->rear = NULL;
        } else {
            deque->rear = deque->rear->prev;
            deque->rear->next = NULL;
        }
        free(temp);
        return data;
    }
}

// Function to display the elements of the deque
void displayDeque(struct Deque* deque) {
    if (isEmpty(deque)) {
        printf("Deque is empty!\n");
        return;
    }
    struct Node* current = deque->front;
    printf("Deque: ");
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main() {
    struct Deque* deque = createDeque();

    enqueueFront(deque, 10);
    enqueueRear(deque, 20);
    enqueueFront(deque, 5);

    displayDeque(deque); // Output: Deque: 5 10 20

    printf("Front element: %d\n", dequeueFront(deque)); // Output: Front element: 5
    printf("Rear element: %d\n", dequeueRear(deque)); // Output: Rear element: 20

    displayDeque(deque); // Output: Deque: 10

    return 0;
}
